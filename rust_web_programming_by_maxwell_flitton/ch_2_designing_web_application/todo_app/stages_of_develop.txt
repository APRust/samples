I. Structuring code.

1. Building to-do structs.

├── main.rs
└── to_do
    ├── enums.rs
    ├── mod.rs
    └── structs
        ├── base.rs
        ├── done.rs
        ├── mod.rs
        └── pending.rs

1.1 enums.rs
- Create enum TaskStatus { DONE, PENDING }
- impl stringify(&self) -> String
- impl Display for TaskStatus similar 'stringify'
- add public mod enums to 'to_do'


1.2 base.rs
- create struct Base { title, status }
- add mod base to ..structs/mod.rs

1.3 pending.rs
- create Pending { super_struct }
- fn new(input_title: &str) -> Self

1.4 done.rs
- create Done { super_struct }
- fn new(input_title: &str) -> Self

1.5 add to ..structs/mod.rs 'pub mod' for pending and done

1.6 add 'pub mod' to to_do/mod.rs for structs and enums

1.7 main.rs
 - add 'mod to_do'
 - logic:
 -- create instance Done
 -- println for Done.title and Done.status
 -- repeat for Pending


2. Managing structs with factories.

2.1 ..to_do/mod.rs
- create enum ItemTypes { Pending(Pending), Done(Done) }
- fn to_do_factory(title: &str, status: TaskStatus) -> ItemTypes
- update main, create with to_do_factory()


3. Defining functionality with traits

3.1 add traits modules, new project structures:
├── mod.rs -- to_do
└── traits
    ├── create.rs
    ├── delete.rs
    ├── edit.rs
    ├── get.rs
    └── mod.rs

 3.2 .../traits/mod.rs.
 + pub mod create/delete/edit/get

 3.3 /to_do/mod.rs
 + pub mod traits;

 3.4 Create traits Get/Create/Edit/Delete with fns:
 - fn get (&self, title: &str) { println!("{} is being fetched", title) }

 edit:
 - fn set_to_done (&self, title: &str)  - "is being set to done"
 - fn set_to_pending(..) - "is being set to pending"

 - fn create (&self, title: &str) - "is being created"

 - fn delete (&self, title: &str) - "is being deleted"

 3.5 Implements traits by structures without overloading (empty).
 - Done => Get/Edit/Delete
 - Pending => Create/Get/Edit

 3.6 Illustrate call traits fns in match of main.
 - DONE => get and delete
 - PENDING => get and set_done


 II. Interacting with the environment.

 1. Reading and writing JSON files

 1.1 add serde_json = "1.0.59"

 1.2 Create state.rs

    ├── main.rs
    ├── to_do
    └── state.rs

 1.3 Add imports:
 - fs/fs::File
 - io::Read
 - serde_json::Map/value::Value/json

 1.4 Add fn for read and write JSON in state.rs
 - fn read_file(file_name: &str) -> Map<String, Value>
 logic: mut file:File => mut data: String => json: Value => state: Map<String, Value>

 - fn write_to_file(file_name: &str, state: &mut Map<String, Value>)
 logic: new_data => fs::write!

 1.5 main.rs
 - Process input args. first - status: &String, second - title: &String
 - read_file by title => print before => insert new data => print after => write_file

 1.6 cargo run pending washing


 2. Revisiting traits

 2.1. get.rs
 - fn get(&self, title: &String, state: &Map<String, Value>) {
 -- get from Map and match Option for println
 }

 2.2 create.rs
 - fn create(&self, title: &String, status: &String, state: &mut Map<String, Value>) {
 -- insert to map
 -- write to file
 -- println
 }

 2.3 delete.rs
 - fn delete(&self, title: &String, state: &mut Map<String, Value>) {
 -- remove from Map
 -- write to file
 -- println
 }

 2.4 edit.rs
 - fn set_to_done(&self, title: &String, state: &mut Map<String, Value>){
 -- insert with title and json!(status-done)
 -- write to file
 -- println
 }

 - fn set_to_pending(&self, title: &String, state: &mut Map<String, Value>){
 -- insert with title and json!(status-pending)
 -- write to file
 -- println
 }
 
 3. Add layer processes.rs for processing traits and structs
 
    ├── main.rs
    ├── to_do
    ├── state.rs
    ├── processes.rs
    
  3.1. processes.rs
  - add imports:
  -- serde_json: Map/value:Value
  -- ItemTypes
  -- all structs
  -- all traits
  
  - fn process_pending(item: Pending, command: String, state: &Map<String, Value>) {
  -- state.clone();
  -- match command.as_str() => get/create/edit/_ - "command: {} not supported"
  }
 
  - fn process_done(item: Done, command: String, state: &Map<String, Value>) {
  -- state.clone();
  -- match command.as_str() => get/delete/edit/_ - "command: {} not supported"
  }
  
  - fn process_input(item: ItemTypes, command: String, state: &Map<String, Value>) {
  -- match item. Pending => process_pending / Done => process_done
  }
  
  4. Finished TaskStatus and main.rs.
  
  4.1. Add for TaskStatus fn from_string(input_string: String) -> Self {
  - "DONE" => DONE / "PENDING" => PENDING / _ => panic "input{} not supported"
  }
  
  4.1 update imports:
  - serde_json only for reading
  - state::read_file
  - to_do::to_do_factory/TaskStatus
  - processes::process_input
  
  4.2 update main():
  - process input args (first - command, second - title)
  - getting state from file (read_file)
  - empty var status (not inited)
  - match for get status from state by title:
  -- Some => status = result.to_string().replace
  -- None => status = "pending".to_owned()
  - item = to_do_factory(title, TaskStatus::from_string(status.to_uppercase()));
  - process_input(item, command.to_string(), &state);
  
  
  5. cargo run create washing
 









































































































